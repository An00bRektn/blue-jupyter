import os
import hashlib
import sys
from datetime import datetime
import pyminizip

sys.path.append('../utils/')
from malware import *
from colors import *

# Globals
root_dir = os.getcwd()
dropbox = "dropbox/"
saved_specimens = "saved-specimens/"
now = datetime.now()
date_time = now.strftime("%m-%d-%Y-%H%M%S")


class MalwareSample:

    def __init__(self, sample_name):
        self.sample_name = sample_name.replace("dropbox/", "")
        self.saved_sample_name = ""
        self.sample_path = ""
        self.sha256sum = ""

    @classmethod
    def create_specimen_dirs(cls, sample_name):
        saved_sample_name = str(date_time) + "_" + sample_name
        sample_dir = saved_specimens + saved_sample_name
        os.system("mkdir " + sample_dir)
        return saved_sample_name

    @classmethod
    def move_and_defang(cls, sample_name, saved_sample_name):
        # Rename to convention [Malware].[Unknown].[OriginalExtension].[DefangExtension]
        prefix = "Malware."
        suffix = ".malz"
        defanged_sample = prefix + sample_name + suffix
        saved_sample = "saved-specimens/" + saved_sample_name + "/" + defanged_sample
        # Copy for dev/troubleshooting, move for prod version
        # os.system("mv dropbox/" + sample + " saved-specimens/" + specimen_dir)
        os.system("cp dropbox/" + sample_name + " " + saved_sample)
        return saved_sample

    @classmethod
    def get_sha256sum(cls, sample_path, saved_sample_name):
        sha256_hash = hashlib.sha256()
        with open(sample_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
            sha256_value = sha256_hash.hexdigest()
        with open(saved_specimens + saved_sample_name + "/sha256sum.txt", "w") as shafile:
            shafile.write(sha256_value)
            shafile.close()
        return sha256_value

    @classmethod
    def pull_strings(cls, length, saved_sample_name, sample_path):
        """
         Strings with StringSifter
         Ranking extracted strings for relevance in malware analysis
         $ poetry add stringsifter~=2.0
         $ flarestrings -n 8 <my_sample> | rank_strings
         """
        sifter_out = "StringSifter-Out.log"
        outfile = saved_specimens + saved_sample_name + "/" + sifter_out
        cmd = "flarestrings -n " + str(length) + " " + sample_path + " | rank_strings --scores > " + outfile
        os.system(cmd)
        print(recc + "Written to outfile: " + outfile)


    @classmethod
    def zip_and_password_protect(cls, sample_path, saved_sample_name):
        zip_name = saved_specimens + saved_sample_name + "/" + saved_sample_name + ".zip"
        password = "infected"
        com_lvl = 5
        pyminizip.compress(sample_path, None, zip_name,
                           password, com_lvl)
        with open(saved_specimens + saved_sample_name + "/" + "password.txt", "w") as password_file:
            password_file.write(password)
            password_file.close()
