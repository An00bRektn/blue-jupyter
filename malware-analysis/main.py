#!/usr/bin/env python3
import os
import hashlib
import sys
from subprocess import Popen, PIPE
from datetime import datetime

sys.path.append('../utils/')
from malware import *
from colors import *

# Globals
root_dir = os.getcwd()
dropbox = "dropbox/"
saved_specimens = "saved-specimens/"
now = datetime.now()
date_time = now.strftime("%m-%d-%Y-%H%M%S")


# Utility Functions

def enum_malware_samples():
    samples = []
    for file in os.listdir(dropbox):
        print(file)
        samples.append(file)
    return samples


def create_specimen_dirs(samples):
    specimen_dirs = []
    os.chdir(saved_specimens)
    for sample in samples:
        sample_dir = str(date_time + "_" + sample)
        os.system("mkdir " + sample_dir)
        specimen_dirs.append(sample_dir)
    os.chdir(root_dir)
    return specimen_dirs


def move_samples(samples, specimen_dirs):
    saved_samples = []
    for sample in samples:
        for specimen_dir in specimen_dirs:
            if sample in specimen_dir:
                saved_sample = "saved-specimens/" + specimen_dir + "/" + sample
                # Copy for dev/troubleshooting, move for prod version
                # os.system("mv dropbox/" + sample + " saved-specimens/" + specimen_dir)
                os.system("cp dropbox/" + sample + " " + saved_sample)
                saved_samples.append(saved_sample)
    return saved_samples


# Defang
# Prefix is 'Malware' until more analysis is completed, then it can be changed to "RAT", "Ransomware", etc
def defang_samples(saved_samples):
    # TODO
    prefix = "Malware"
    print("Defang!")


# Hashes
def get_hashes(saved_samples):
    hashes = []
    for sample in saved_samples:
        sha256_hash = hashlib.sha256()
        with open(sample, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
            sha256_value = sha256_hash.hexdigest()
        print(good + "Sample: " + sample + " SHA256 SUM: " + str(sha256_value))
        hashes.append(sha256_value)
    return hashes


def pull_strings(saved_samples, specimen_dirs):
    """
     Strings with StringSifter
     Ranking extracted strings for relevance in malware analysis
     $ poetry add stringsifter~=2.0
     $ flarestrings -n 8 <my_sample> | rank_strings
     """
    print(saved_samples)
    length = int(input(recc + "Input your desired minimum string length [default is 4, 6-8 is recommended] > "))

    """
    TODO: develop a better way to get the string outfile into the right directory. This currently stomps itself for
    multiple samples. I need a better way of retaining the sample directories as a path so I can pass that to a 
    move command to get the strings out into the right area. All of this is to say there is probably a much, 
    much better way to approach all of this in general. 
    """

    for sample in saved_samples:
        try:
            sifter_out = "StringSifter-Out.log"
            cmd = "flarestrings -n " + str(length) + " " + sample + " | rank_strings > " + sifter_out
            # p = Popen(cmd.split(), stdout=PIPE, stderr=PIPE)
            # p.communicate()

            os.system(cmd)
            print(recc + "Written to outfile: " + sifter_out)
        except Exception as e:
            print(printError + "Error: " + str(e))

# FLOSS output
# TODO

# Save specimen in password protected zip file with a standard naming convention
# TODO
